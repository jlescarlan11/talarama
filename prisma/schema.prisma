generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String       @id @default(cuid())
  name          String?
  username      String?      @unique
  email         String       @unique
  emailVerified DateTime?
  image         String?
  role          Role         @default(USER)
  accounts      Account[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  DiaryEntry    DiaryEntry[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Movie {
  id                String       @id @default(uuid())
  title             String
  description       String
  releasedYear      Int
  duration          Int
  posterUrl         String?
  directorFirstName String
  directorLastName  String
  genres            MovieGenre[]
  DiaryEntry        DiaryEntry[]

  @@map("movie")
}

model Genre {
  id        String       @id @default(uuid())
  genreName String       @unique @db.VarChar(55)
  movies    MovieGenre[]

  @@map("genre")
}

model MovieGenre {
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  movieId String
  genreId String

  @@id([movieId, genreId])
  @@index([genreId])
  @@map("movie_genres")
}

model DiaryEntry {
  id              String   @id @default(uuid())
  rating          Float
  review          String   @db.Text
  watchCount      Int      @default(1)
  lastWatchedDate DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  movie           Movie    @relation(fields: [movieId], references: [id])
  userId          String
  movieId         String

  @@unique([userId, movieId])
}
