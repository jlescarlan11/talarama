generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String        @id @default(cuid())
  name          String?
  username      String?       @unique
  email         String        @unique
  emailVerified DateTime?
  image         String?
  role          Role          @default(USER)
  accounts      Account[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  diaryEntries  DiaryEntry[]
  watchedMovies WatchedList[]
  likedMovies   LikedBy[]
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Movie {
  id           String  @id @default(uuid())
  title        String  @db.VarChar(50)
  description  String?
  releasedYear Int
  duration     String  @db.VarChar(50)
  posterUrl    String? @db.VarChar(50)

  genres       MovieGenre[]
  diaryEntries DiaryEntry[]
  watchedBy    WatchedList[]
  likedBy      LikedBy[]

  @@map("movie")
}

model Genre {
  id        String       @id @default(uuid())
  genreName String       @unique @db.VarChar(50)
  movies    MovieGenre[]

  @@map("genre")
}

model WatchedList {
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])
  createdAt DateTime @default(now())

  userId  String
  movieId String

  @@id([userId, movieId])
  @@map("watched_list")
}

model LikedBy {
  user    User     @relation(fields: [userId], references: [id])
  movie   Movie    @relation(fields: [movieId], references: [id])
  likedAt DateTime @default(now())

  userId  String
  movieId String

  @@id([userId, movieId])
  @@map("liked_by")
}

model MovieGenre {
  movie   Movie  @relation(fields: [movieId], references: [id], onDelete: Cascade)
  genre   Genre  @relation(fields: [genreId], references: [id], onDelete: Cascade)
  movieId String
  genreId String

  @@id([movieId, genreId])
  @@index([genreId])
  @@map("movie_genres")
}

model DiaryEntry {
  id        String   @id @default(uuid())
  rating    Int
  review    String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])
  userId    String
  movieId   String

  @@unique([userId, movieId])
  @@map("diary_entry")
}
